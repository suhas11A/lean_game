msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Tue Jun  3 10:46:14 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Introduction to Proofs in Lean"
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Following along with Example 1.1.1, let's prove a basic theorem within Lean.\n"
"\n"
"In the center window, you can see the statement of the theorem you\n"
"need to prove, along with a list of ‚ÄúObjects‚Äù and a ‚ÄúGoal‚Äù.  The\n"
"objects tell you which variables exist, and what type they are.  In\n"
"this case, $a$, $b$, and $c$ are all members of the type $‚Ñ§$, the\n"
"integers.  The goal is what you have left to prove.\n"
"\n"
"The text window at the bottom allows you to enter commands, called\n"
"tactics, that advance the proof.  There is a list of tactics on the\n"
"right side of the screen.  Clicking on a tactic will give you a\n"
"description of it.\n"
"\n"
"To start, we should give names to the hypotheses of the theorem, that\n"
"$c ‚à£ b$ and that $b ‚à£ a$.  Type `intro c_div_b` to give the first\n"
"hypothesis a name."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Let $a$, $b$, $c \\in \\mathbb{Z}$.  If $c$ divides $b$ and $b$\n"
"    divides $a$, then $c$ divides $a$."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Notice that there is a new section, Assumptions, that lists the\n"
"facts that we have learned so far.  `c_div_b` is the name of the\n"
"assumption that says that $c ‚à£ b$.  Also notice that the goal has\n"
"changed; since we have introduced the first hypothesis, it was\n"
"removed from our goal.\n"
"\n"
"Type `intro b_div_a` in order to introduce the second hypothesis."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Now the only thing we have left to do is to show that $c ‚à£ a$.\n"
"Following the book, let‚Äôs expand the definition of ‚Äúdivides‚Äù in our\n"
"hypotheses.  To do this, we can use the `rcases` tactic, like so:\n"
"```\n"
"rcases c_div_b with ‚ü®q, hb‚ü©\n"
"```\n"
"We will see more clearly what rcases does in the future, but for\n"
"now, think of it as a way to expand the meaning of a hypothesis by\n"
"spliting it into smaller objects and hypotheses.  What do you expect\n"
"$q$ and `hb` will stand for?"
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "We see that $q$ is introduced as a new integer, and we have a new\n"
"hypothesis, `hb` which tells us that $b=qc$.  Try to expand the\n"
"definition of `b_div_a` on your own; use $r$ for the name of the\n"
"witness."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Our next step is to substitute $b$ for $qc$ in the equation $a=rb$.\n"
"We can do this using the `rw` tactic, short for ‚Äúrewrite‚Äù.  To use\n"
"`rw`, type\n"
"```\n"
"rw [hb] at ha\n"
"```\n"
"The hypothesis within the square brackets says what will be\n"
"rewritten, and the hypothesis after the keyword `at` says where to\n"
"perform the substitution.  When you use this tactic, Lean will\n"
"replace the first occurrence of the left-hand side of `hb` (i.e.,\n"
"$q$) with the right-hand side of `hb` (i.e., $qc$) in the equation\n"
"`ha`."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "We have made some progress, but we still need to prove our goal.  In\n"
"order to prove $a ‚à£ c$, we have to find an integer $s$ such that $a\n"
"= sc$.  The integer $s$ that we choose is called a *witness* to $a ‚à£\n"
"c$, and we need to tell Lean what the value of $s$ is.\n"
"\n"
"We can do this using the `use` tactic.  Type\n"
"```\n"
"use r * q\n"
"```\n"
"to tell Lean that the witness to $a ‚à£ c$ is $rq$."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Now, since Lean knows what the witness is, our goal has changed to\n"
"proving that $a = c(rq)$.  We have a hypothesis that tells us what\n"
"$a$ is, so we can replace $a$ in our goal with its expansion by\n"
"again using the `rw` tactic.  This time, type\n"
"```\n"
"rw [ha]\n"
"```\n"
"There‚Äôs no `at` in this command; this means that Lean will do its\n"
"rewriting in the goal, rather than in another hypothesis."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Oh no‚Äîwe‚Äôre so close now, but Lean seems to have tripped up on\n"
"something basic, probably so simple you didn‚Äôt even think about it.\n"
"We need to use associativity of multiplication to finish this proof.\n"
"\n"
"Lean doesn‚Äôt know about basic properties of addition and\n"
"multiplication, because they are theorems, and they have to be\n"
"proven first.  Later on, we will do the work of proving these\n"
"properties ourselves, but for now, there is a tactic that can apply\n"
"these properties for us, called `ring`.  Type in `ring`, on its own,\n"
"to finish the proof."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "todo"
msgstr ""

#: Game.Levels.LogicalStructure
msgid "Chapter 1: Logical Structure"
msgstr ""

#: Game.Levels.LogicalStructure
msgid "todo"
msgstr ""

#: Game.Levels.Sets.L01_intro
msgid "Introduction to Subsets"
msgstr ""

#: Game.Levels.Sets.L01_intro
msgid "Following along with Example 2.1.16, let's prove a basic set theorem using Lean.\n"
"\n"
"To prove A ‚äÜ B, we need to show that if something is an element of A, then it is also an element of B i.e we\n"
"need to prove `x ‚àà A ‚Üí x ‚àà B`\n"
"(To enter the symbol ‚äÜ type `\\sub`, and for ‚àà type `\\mem` or `\\in`).\n"
"\n"
"To prove tha goal the first tactic you're going to use is `intro`. Type in `intro x hx` to get started, this will introduce a new\n"
"hypotheses named `hx` with new variable `x` that is needed to prove the goal. Read the documentation on the right by clicking on `intro`.\n"
"Alternatively you could execute `intro x` to first introduce a new variable `x` into goal and then introduce a new hypotheses."
msgstr ""

#: Game.Levels.Sets.L01_intro
msgid "Suppose A is a set. Then A‚äÜA."
msgstr ""

#: Game.Levels.Sets.L01_intro
msgid "Now that we have a goal that matches one of the hypotheses. We use `exact` tactic to close the goal. Read the documentation on the right by clicking on `exact`."
msgstr ""

#: Game.Levels.Sets.L01_intro
msgid "Congratulations! You have completed your first proof in Sets using LEAN!"
msgstr ""

#: Game.Levels.Sets
msgid "Chapter 2: Sets"
msgstr ""

#: Game.Levels.Sets
msgid "Welcome to Set World!\n"
"\n"
"The elements of the sets in this level will come from a universe called `U`.\n"
"To specify that an object `x` belongs to the universe `U`, we write `x : U`.\n"
"To specify that `A` is a set of objects from `U`, we write `A : Set U`.\n"
"(The terminology used in Lean is that `x` has type `U` and `A` has type `Set U`.)\n"
"To say that `x` is an element of `A`, we write `x ‚àà A`.\n"
"(You can enter the symbol `‚àà` by typing `\\mem` or `\\in`.)\n"
"\n"
"\n"
"The notation A ‚äÜ B means that A is a subset of B.\n"
"(To enter the symbol ‚äÜ, type `\\sub`, followed by a space.)\n"
"\n"
"Click on 'Start' below to get started."
msgstr ""

#: Game
msgid "Infinite Descent in Lean"
msgstr ""

#: Game
msgid "An adaptation of [Infinite Descent into Pure Mathematics](https://infinitedescent.xyz) into Lean."
msgstr ""

#: Game
msgid "Here you can put additional information about the game. It is accessible\n"
"from the starting through the drop-down menu.\n"
"\n"
"For example: Game version, Credits, Link to Github and Zulip, etc.\n"
"\n"
"Use markdown."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
