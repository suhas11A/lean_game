msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Mon Jun  2 13:57:10 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Levels.DemoWorld.L01_HelloWorld
msgid "Hello World"
msgstr ""

#: Game.Levels.DemoWorld.L01_HelloWorld
msgid "This text is shown as first message when the level is played.\n"
"You can insert hints in the proof below. They will appear in this side panel\n"
"depending on the proof a user provides."
msgstr ""

#: Game.Levels.DemoWorld.L01_HelloWorld
msgid "You can either start using `¬´{h}¬ª` or `¬´{g}¬ª`."
msgstr ""

#: Game.Levels.DemoWorld.L01_HelloWorld
msgid "You should use `¬´{h}¬ª` now."
msgstr ""

#: Game.Levels.DemoWorld.L01_HelloWorld
msgid "You should use `¬´{g}¬ª` now."
msgstr ""

#: Game.Levels.DemoWorld.L01_HelloWorld
msgid "This last message appears if the level is solved."
msgstr ""

#: Game.Levels.DemoWorld
msgid "Demo World"
msgstr ""

#: Game.Levels.DemoWorld
msgid "This introduction is shown before one enters level 1 of the demo world. Use markdown."
msgstr ""

#: Game.Levels.MyWorld.L01_hello
msgid "Hello World"
msgstr ""

#: Game.Levels.MyWorld.L01_hello
msgid "A message shown at the beginning of the level. Use it to explain any new concepts."
msgstr ""

#: Game.Levels.MyWorld.L01_hello
msgid "The message shown when the level is completed"
msgstr ""

#: Game.Levels.MyWorld
msgid "My First World"
msgstr ""

#: Game.Levels.MyWorld
msgid "This introduction text is shown when one first enters a world."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Introduction to Proofs in Lean"
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Following along with Example 1.1.1, let's prove a basic theorem within Lean.\n"
"\n"
"In the center window, you can see the statement of the theorem you\n"
"need to prove, along with a list of ‚ÄúObjects‚Äù and a ‚ÄúGoal‚Äù.  The\n"
"objects tell you which variables exist, and what type they are.  In\n"
"this case, $a$, $b$, and $c$ are all members of the type $‚Ñ§$, the\n"
"integers.  The goal is what you have left to prove.\n"
"\n"
"The text window at the bottom allows you to enter commands, called\n"
"tactics, that advance the proof.  There is a list of tactics on the\n"
"right side of the screen.  Clicking on a tactic will give you a\n"
"description of it.\n"
"\n"
"To start, we should give names to the hypotheses of the theorem, that\n"
"$c ‚à£ b$ and that $b ‚à£ a$.  Type `intro c_div_b` to give the first\n"
"hypothesis a name."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Let $a$, $b$, $c \\in \\mathbb{Z}$.  If $c$ divides $b$ and $b$\n"
"    divides $a$, then $c$ divides $a$."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Notice that there is a new section, Assumptions, that lists the\n"
"facts that we have learned so far.  `c_div_b` is the name of the\n"
"assumption that says that $c ‚à£ b$.  Also notice that the goal has\n"
"changed; since we have introduced the first hypothesis, it was\n"
"removed from our goal.\n"
"\n"
"Type `intro b_div_a` in order to introduce the second hypothesis."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Now the only thing we have left to do is to show that $c ‚à£ a$.\n"
"Following the book, let‚Äôs expand the definition of ‚Äúdivides‚Äù in our\n"
"hypotheses.  To do this, we can use the `rcases` tactic, like so:\n"
"```\n"
"rcases c_div_b with ‚ü®q, hb‚ü©\n"
"```\n"
"We will see more clearly what rcases does in the future, but for\n"
"now, think of it as a way to expand the meaning of a hypothesis by\n"
"spliting it into smaller objects and hypotheses.  What do you expect\n"
"$q$ and `hb` will stand for?"
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "We see that $q$ is introduced as a new object, namely another\n"
"integer, and that `hb` is the hypothesis that relates `c_div_b` to\n"
"$q$, that $b=qc$.  Try to expand the definition of `b_div_a` on your\n"
"own."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Our next step is to substitute the expansion of $b$ as given by `hb`\n"
"into the equation named `ha`.  We can do this using the `rw` tactic,\n"
"short for ‚Äúrewrite‚Äù.  To use `rw`, type\n"
"```\n"
"rw [hb] at ha\n"
"```\n"
"The hypothesis within the square brackets says what will be\n"
"rewritten, and the hypothesis after the keyword `at` says where to\n"
"perform the substitution.  When you use this tactic, Lean will look\n"
"for the first occurrence of the left-hand side of the `hb`\n"
"equation---that is to say, the variable $b$---in the `ha` equation,\n"
"and replace it with the right-hand side, $qc$.  In other words, this\n"
"command replaces $b$ with $qc$ in the equation $a = rb$."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "We have made some progress, but we still need to prove our goal.\n"
"Since proving $a ‚à£ c$ involves finding an integer $s$ such that $a\n"
"= sc$, we need to tell Lean what the value of $s$ is.  We can do\n"
"this using the `use` tactic.  Type\n"
"```\n"
"use r * q\n"
"```\n"
"to tell Lean that the witness to $a ‚à£ c$ is $rq$."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Now, since Lean knows what the witness is, our goal has changed to\n"
"proving that, indeed, $a = c(rq)$.  We have a hypothesis that tells\n"
"us what $a$ is, so we can replace $a$ in our goal with its expansion\n"
"by again using the `rw` tactic.  This time, type\n"
"```\n"
"rw [ha]\n"
"```\n"
"There‚Äôs no `at` in this command; this means that Lean will do its\n"
"rewriting in the goal, rather than in another hypothesis."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "Oh no---we‚Äôre so close now, but Lean seems to have tripped up on\n"
"something basic, probably so simple you didn‚Äôt even think about it.\n"
"We need to use the associativity of multiplication to finish this\n"
"proof.\n"
"\n"
"Lean doesn‚Äôt know about basic properties of addition and\n"
"multiplication, because they are theorems, and they have to be\n"
"proven first.  Later on, we will do the work of proving these\n"
"properties ourselves, but for now, there is a tactic that can apply\n"
"these properties for us, called `ring`.  Type in `ring`, on its own,\n"
"to finish the proof."
msgstr ""

#: Game.Levels.LogicalStructure.L01_intro
msgid "todo"
msgstr ""

#: Game.Levels.LogicalStructure
msgid "Chapter 1: Logical Structure"
msgstr ""

#: Game.Levels.LogicalStructure
msgid "todo"
msgstr ""

#: Game
msgid "Infinite Descent in Lean"
msgstr ""

#: Game
msgid "An adaptation of [Infinite Descent into Pure Mathematics](https://infinitedescent.xyz) into Lean."
msgstr ""

#: Game
msgid "Here you can put additional information about the game. It is accessible\n"
"from the starting through the drop-down menu.\n"
"\n"
"For example: Game version, Credits, Link to Github and Zulip, etc.\n"
"\n"
"Use markdown."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
